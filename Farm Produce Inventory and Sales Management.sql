CREATE TABLE Produce (
    ProduceID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Name VARCHAR2(50) NOT NULL,
    Category VARCHAR2(30) NOT NULL,
    Description VARCHAR2(200)
);

CREATE TABLE Suppliers (
    SupplierID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Name VARCHAR2(50) NOT NULL,
    ContactInfo VARCHAR2(100),
    Address VARCHAR2(200),
    ProduceID NUMBER NOT NULL,
    FOREIGN KEY (ProduceID) REFERENCES Produce(ProduceID) ON DELETE CASCADE
);

CREATE TABLE Inventory (
    InventoryID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ProduceID NUMBER NOT NULL,
    StockQuantity NUMBER NOT NULL CHECK (StockQuantity >= 0),
    UnitPrice NUMBER(10, 2) NOT NULL CHECK (UnitPrice > 0),
    LastUpdated DATE DEFAULT SYSDATE,
    SupplierID NUMBER,
    FOREIGN KEY (ProduceID) REFERENCES Produce(ProduceID) ON DELETE CASCADE,
    FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID) ON DELETE SET NULL
);

CREATE TABLE Sales (
    SalesID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ProduceID NUMBER NOT NULL,
    QuantitySold NUMBER NOT NULL CHECK (QuantitySold > 0),
    TotalPrice NUMBER(10, 2) NOT NULL, 
    SaleDate DATE DEFAULT SYSDATE,
    FOREIGN KEY (ProduceID) REFERENCES Produce(ProduceID) ON DELETE CASCADE
);

CREATE TABLE Customers (
    CustomerID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Name VARCHAR2(50) NOT NULL,
    ContactInfo VARCHAR2(100)
);

INSERT INTO Produce (ProduceID, Name, Category, Description) VALUES (1, 'Tomatoes', 'Vegetable', 'Fresh red tomatoes');
INSERT INTO Produce (ProduceID, Name, Category, Description) VALUES (2, 'Wheat', 'Grain', 'High-quality wheat grains');
INSERT INTO Produce (ProduceID, Name, Category, Description) VALUES (3, 'Apples', 'Fruit', 'Organic apples from the orchard');
INSERT INTO Produce (ProduceID, Name, Category, Description) VALUES (4, 'Carrots', 'Vegetable', 'Crunchy and fresh carrots');
INSERT INTO Produce (ProduceID, Name, Category, Description) VALUES (5, 'Bananas', 'Fruit', 'Sweet ripe bananas');
INSERT INTO Produce (ProduceID, Name, Category, Description) VALUES (6, 'Rice', 'Grain', 'Long-grain basmati rice');
INSERT INTO Produce (ProduceID, Name, Category, Description) VALUES (7, 'Onions', 'Vegetable', 'Golden onions');
INSERT INTO Produce (ProduceID, Name, Category, Description) VALUES (8, 'Strawberries', 'Fruit', 'Fresh garden strawberries');
INSERT INTO Produce (ProduceID, Name, Category, Description) VALUES (9, 'Corn', 'Grain', 'Sweet corn kernels');
INSERT INTO Produce (ProduceID, Name, Category, Description) VALUES (10, 'Potatoes', 'Vegetable', 'Premium quality potatoes');


INSERT INTO Suppliers (SupplierID, Name, ContactInfo, Address, ProduceID) VALUES (1, 'AgriSupplier Inc.', '1234567890', '123 Farm Lane', 1);
INSERT INTO Suppliers (SupplierID, Name, ContactInfo, Address, ProduceID) VALUES (2, 'Farm Supplies Co.', '0987654321', '456 Crop Street', 2);
INSERT INTO Suppliers (SupplierID, Name, ContactInfo, Address, ProduceID) VALUES (3, 'Orchard Goods', '1112223334', '789 Orchard Avenue', 3);
INSERT INTO Suppliers (SupplierID, Name, ContactInfo, Address, ProduceID) VALUES (4, 'Green Fields Supplies', '2223334445', '321 Green Street', 4);
INSERT INTO Suppliers (SupplierID, Name, ContactInfo, Address, ProduceID) VALUES (5, 'Harvest Distributors', '5556667778', '654 Harvest Road', 5);

INSERT INTO Inventory (InventoryID, ProduceID, StockQuantity, UnitPrice, SupplierID) VALUES (1, 1, 500, 20.50, 1);
INSERT INTO Inventory (InventoryID, ProduceID, StockQuantity, UnitPrice, SupplierID) VALUES (2, 2, 1000, 15.00, 2);
INSERT INTO Inventory (InventoryID, ProduceID, StockQuantity, UnitPrice, SupplierID) VALUES (3, 3, 300, 50.00, 3);
INSERT INTO Inventory (InventoryID, ProduceID, StockQuantity, UnitPrice, SupplierID) VALUES (4, 4, 600, 25.00, 4);
INSERT INTO Inventory (InventoryID, ProduceID, StockQuantity, UnitPrice, SupplierID) VALUES (5, 5, 400, 10.00, 5);
INSERT INTO Inventory (InventoryID, ProduceID, StockQuantity, UnitPrice, SupplierID) VALUES (6, 6, 2000, 12.00, 2);
INSERT INTO Inventory (InventoryID, ProduceID, StockQuantity, UnitPrice, SupplierID) VALUES (7, 7, 800, 18.00, 1);
INSERT INTO Inventory (InventoryID, ProduceID, StockQuantity, UnitPrice, SupplierID) VALUES (8, 8, 350, 30.00, 3);
INSERT INTO Inventory (InventoryID, ProduceID, StockQuantity, UnitPrice, SupplierID) VALUES (9, 9, 700, 22.00, 4);
INSERT INTO Inventory (InventoryID, ProduceID, StockQuantity, UnitPrice, SupplierID) VALUES (10, 10, 1200, 12.50, 5);
INSERT INTO Inventory (InventoryID, ProduceID, StockQuantity, UnitPrice, SupplierID) VALUES (11, 1, 200, 19.00, 1);
INSERT INTO Inventory (InventoryID, ProduceID, StockQuantity, UnitPrice, SupplierID) VALUES (12, 5, 300, 9.50, 5);


INSERT INTO Customers (CustomerID, Name, ContactInfo) VALUES (1, 'Alice Johnson', 'alice.johnson@example.com');
INSERT INTO Customers (CustomerID, Name, ContactInfo) VALUES (2, 'Bob Smith', 'bob.smith@example.com');
INSERT INTO Customers (CustomerID, Name, ContactInfo) VALUES (3, 'Charlie Brown', 'charlie.brown@example.com');
INSERT INTO Customers (CustomerID, Name, ContactInfo) VALUES (4, 'Diana Prince', 'diana.prince@example.com');
INSERT INTO Customers (CustomerID, Name, ContactInfo) VALUES (5, 'Ethan Hunt', 'ethan.hunt@example.com');
INSERT INTO Customers (CustomerID, Name, ContactInfo) VALUES (6, 'Fiona Carter', 'fiona.carter@example.com');


INSERT INTO Sales (SalesID, ProduceID, QuantitySold, TotalPrice, SaleDate) VALUES (1, 1, 20, 410.00, SYSDATE);
INSERT INTO Sales (SalesID, ProduceID, QuantitySold, TotalPrice, SaleDate) VALUES (2, 2, 50, 750.00, SYSDATE - 1);
INSERT INTO Sales (SalesID, ProduceID, QuantitySold, TotalPrice, SaleDate) VALUES (3, 3, 10, 500.00, SYSDATE - 2);
INSERT INTO Sales (SalesID, ProduceID, QuantitySold, TotalPrice, SaleDate) VALUES (4, 4, 30, 750.00, SYSDATE - 3);
INSERT INTO Sales (SalesID, ProduceID, QuantitySold, TotalPrice, SaleDate) VALUES (5, 5, 15, 150.00, SYSDATE - 4);
INSERT INTO Sales (SalesID, ProduceID, QuantitySold, TotalPrice, SaleDate) VALUES (6, 6, 100, 1200.00, SYSDATE - 5);
INSERT INTO Sales (SalesID, ProduceID, QuantitySold, TotalPrice, SaleDate) VALUES (7, 7, 25, 450.00, SYSDATE - 6);
INSERT INTO Sales (SalesID, ProduceID, QuantitySold, TotalPrice, SaleDate) VALUES (8, 8, 12, 360.00, SYSDATE - 7);
INSERT INTO Sales (SalesID, ProduceID, QuantitySold, TotalPrice, SaleDate) VALUES (9, 9, 40, 880.00, SYSDATE - 8);
INSERT INTO Sales (SalesID, ProduceID, QuantitySold, TotalPrice, SaleDate) VALUES (10, 10, 50, 625.00, SYSDATE - 9);


SELECT * FROM Produce;
SELECT * FROM Suppliers;
SELECT * FROM Customers;
SELECT * FROM Inventory;
SELECT * FROM Sales;


--Trigger 1: Automatically Update Inventory After a Sale
CREATE OR REPLACE TRIGGER Update_Inventory_After_Sale
AFTER INSERT ON Sales
FOR EACH ROW
BEGIN
  UPDATE Inventory
  SET StockQuantity = StockQuantity - :NEW.QuantitySold
  WHERE ProduceID = :NEW.ProduceID;
END;
/


--Trigger 2: Prevent Low Stock from Being Sold
CREATE OR REPLACE TRIGGER Prevent_Insufficient_Stock
BEFORE INSERT ON Sales
FOR EACH ROW
DECLARE
  stock_available NUMBER;
BEGIN
  SELECT StockQuantity INTO stock_available
  FROM Inventory
  WHERE ProduceID = :NEW.ProduceID;

  IF :NEW.QuantitySold > stock_available THEN
    RAISE_APPLICATION_ERROR(-20001, 'Insufficient stock for this sale.');
  END IF;
END;
/


CREATE TABLE RestockAlerts (
    AlertID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, 
    InventoryID NUMBER NOT NULL,                              
    ProduceID NUMBER NOT NULL,                                  
    AlertMessage VARCHAR2(255) NOT NULL,                      
    AlertDate DATE DEFAULT SYSDATE NOT NULL,                   
    FOREIGN KEY (InventoryID) REFERENCES Inventory(InventoryID) ON DELETE CASCADE, 
    FOREIGN KEY (ProduceID) REFERENCES Produce(ProduceID) ON DELETE CASCADE      
);


--Trigger 3: Notify Restocking Requirement

CREATE OR REPLACE TRIGGER Notify_Restock
AFTER UPDATE OF StockQuantity ON Inventory
FOR EACH ROW
BEGIN
  IF :NEW.StockQuantity < 100 THEN
    INSERT INTO RestockAlerts (InventoryID, ProduceID, AlertMessage, AlertDate)
    VALUES (:NEW.InventoryID, :NEW.ProduceID, 'Stock below threshold. Restock required.', SYSDATE);
  END IF;
END;
/


--Procedure 1: Add a New Sale
CREATE OR REPLACE PROCEDURE Add_Sale (
    p_ProduceID IN NUMBER,
    p_QuantitySold IN NUMBER
)
AS
    v_UnitPrice NUMBER;
    v_TotalPrice NUMBER;
    v_StockQuantity NUMBER;
BEGIN
    -- Get the current stock quantity
    SELECT StockQuantity INTO v_StockQuantity
    FROM Inventory
    WHERE ProduceID = p_ProduceID;

    -- Validate stock availability
    IF p_QuantitySold > v_StockQuantity THEN
        RAISE_APPLICATION_ERROR(-20001, 'Insufficient stock to complete the sale.');
    END IF;

    -- Get the unit price of the produce
    SELECT UnitPrice INTO v_UnitPrice
    FROM Inventory
    WHERE ProduceID = p_ProduceID;

    -- Calculate the total price
    v_TotalPrice := p_QuantitySold * v_UnitPrice;

    -- Insert the sale record
    INSERT INTO Sales (ProduceID, QuantitySold, TotalPrice) 
    VALUES (p_ProduceID, p_QuantitySold, v_TotalPrice);

    -- Update the inventory
    UPDATE Inventory
    SET StockQuantity = StockQuantity - p_QuantitySold
    WHERE ProduceID = p_ProduceID;

    -- Check if the stock is low after the sale
    SELECT StockQuantity INTO v_StockQuantity
    FROM Inventory
    WHERE ProduceID = p_ProduceID;

    IF v_StockQuantity < 50 THEN
        -- Insert a low stock alert
        INSERT INTO RestockAlerts (InventoryID, ProduceID, AlertMessage, AlertDate)
        VALUES (
            (SELECT InventoryID FROM Inventory WHERE ProduceID = p_ProduceID),
            p_ProduceID,
            'Stock below threshold. Restock required.',
            SYSDATE
        );
    END IF;

    -- Print a confirmation message
    DBMS_OUTPUT.PUT_LINE('Sale recorded successfully for Produce ID: ' || p_ProduceID);
END;
/



--Procedure 2: Generate Sales Report
CREATE OR REPLACE PROCEDURE Generate_Sales_Report
IS
  CURSOR sales_cursor IS
    SELECT p.Name AS ProduceName, 
           SUM(s.QuantitySold) AS TotalQuantitySold, 
           SUM(s.TotalPrice) AS TotalRevenue
    FROM Sales s
    JOIN Produce p ON s.ProduceID = p.ProduceID
    GROUP BY p.Name;
BEGIN
  -- Iterate through the cursor
  FOR record IN sales_cursor LOOP
    DBMS_OUTPUT.PUT_LINE('Produce: ' || record.ProduceName || 
                         ', Total Quantity Sold: ' || record.TotalQuantitySold || 
                         ', Total Revenue: ' || TO_CHAR(record.TotalRevenue, 'FM999G999D00'));
  END LOOP;
END;
/

--Procedure 3: Restock Inventory
CREATE OR REPLACE PROCEDURE Restock_Inventory(
  p_ProduceID IN NUMBER,
  p_SupplierID IN NUMBER,
  p_Quantity IN NUMBER,
  p_UnitPrice IN NUMBER
)
AS
BEGIN
  -- Try updating the existing inventory record
  UPDATE Inventory
  SET StockQuantity = StockQuantity + p_Quantity, 
      UnitPrice = p_UnitPrice,
      SupplierID = p_SupplierID
  WHERE ProduceID = p_ProduceID AND SupplierID = p_SupplierID;

  -- Check if the update affected any rows
  IF SQL%ROWCOUNT = 0 THEN
    -- If no rows were updated, insert a new inventory record
    INSERT INTO Inventory (ProduceID, StockQuantity, UnitPrice, SupplierID)
    VALUES (p_ProduceID, p_Quantity, p_UnitPrice, p_SupplierID);
  END IF;

  -- Print a confirmation message
  DBMS_OUTPUT.PUT_LINE('Inventory restocked successfully for Produce ID: ' || p_ProduceID || 
                       ', Supplier ID: ' || p_SupplierID || 
                       ', Quantity: ' || p_Quantity || 
                       ', Unit Price: ' || TO_CHAR(p_UnitPrice, 'FM999G999D00'));
END;
/
--********************************************************************************************************************************
select * from inventory where ProduceID = 7;
select * from Sales;

--Insert a new sale
INSERT INTO Sales (SalesID, ProduceID, QuantitySold, TotalPrice, SaleDate) VALUES (12, 3, 32, 525.00, SYSDATE - 5);
SELECT * FROM Inventory WHERE ProduceID = 3;

--Prevent sale of insufficient stock
INSERT INTO Sales (SalesID, ProduceID, QuantitySold, TotalPrice, SaleDate) VALUES (11, 7, 1050, 625.00, SYSDATE - 9);


--Notify Restock
-- Update inventory to low stock
UPDATE Inventory SET StockQuantity = 20 WHERE ProduceID = 6;

-- Check RestockAlerts table
SELECT * FROM RestockAlerts;



